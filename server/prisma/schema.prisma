// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StorageType {
  ROOM_TEMPERATURE
  REFRIGERATED
  FROZEN
  DRY_STORAGE
  COOL_DARK
}

enum MeasurementSystem {
  METRIC
  US
}

enum UnitType {
  VOLUME
  WEIGHT
  COUNT
  LENGTH
  TEMPERATURE
}

// INGREDIENT CORE MODELS
model Ingredient {
  id                   Int              @id @default(autoincrement()) @map("ingredient_id")
  name                 String
  description          String?
  categoryId           Int              @map("category_id")
  category             IngredientCategory @relation(fields: [categoryId], references: [id])
  subcategoryId        Int?             @map("subcategory_id")
  subcategory          IngredientSubcategory? @relation(fields: [subcategoryId], references: [id])
  defaultUnitId        Int              @map("default_unit_id")
  defaultUnit          UnitOfMeasure    @relation("DefaultUnit", fields: [defaultUnitId], references: [id])
  
  // Storage and shelf life
  isPerishable         Boolean          @default(false) @map("is_perishable")
  storageType          StorageType      @default(ROOM_TEMPERATURE) @map("storage_type")
  shelfLifeDays        Int?             @map("shelf_life_days") // Shelf life in days
  storageInstructions  String?          @map("storage_instructions")
  
  // Supplier information
  supplierInstructions String?          @map("supplier_instructions") // Instructions for ordering from suppliers
  supplierNotes        String?          @map("supplier_notes") // Notes about suppliers, pricing, etc.
  preferredSupplier    String?          @map("preferred_supplier")
  orderLeadTimeDays    Int?             @map("order_lead_time_days") // Lead time for ordering in days
  
  // Practical attributes
  costPerUnitDollars   Float?           @map("cost_per_unit_dollars") // Cost per unit in dollars
  packageSize          Float?           @map("package_size") // Size of standard package
  packageUnitId        Int?             @map("package_unit_id")
  packageUnit          UnitOfMeasure?   @relation("PackageUnit", fields: [packageUnitId], references: [id])
  
  // Additional boolean attributes
  isLocal              Boolean          @default(false) @map("is_local")
  isOrganic            Boolean          @default(false) @map("is_organic")
  isSeasonalItem       Boolean          @default(false) @map("is_seasonal_item")
  hasVariablePrice     Boolean          @default(false) @map("has_variable_price")
  isCommonAllergen     Boolean          @default(false) @map("is_common_allergen")
  isSpecialOrder       Boolean          @default(false) @map("is_special_order")
  
  // Relationships
  allergens            IngredientAllergen[]
  dietaryFlags         IngredientDietaryFlag[]
  substitutes          IngredientSubstitute[]  @relation("OriginalIngredient")
  substituteFor        IngredientSubstitute[]  @relation("SubstituteIngredient")
  densityConversions   IngredientDensity[]
  
  // Tracking
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([name])
  @@index([isPerishable])
  @@index([storageType])
}

model IngredientCategory {
  id                   Int              @id @default(autoincrement()) @map("category_id")
  name                 String           @unique
  description          String?
  storeSection         String?          @map("store_section")
  displayOrder         Int              @default(0) @map("display_order")
  
  // Relationships
  ingredients          Ingredient[]
  subcategories        IngredientSubcategory[]
  
  // Tracking
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
}

model IngredientSubcategory {
  id                   Int              @id @default(autoincrement()) @map("subcategory_id")
  name                 String
  description          String?
  categoryId           Int              @map("category_id")
  category             IngredientCategory @relation(fields: [categoryId], references: [id])
  displayOrder         Int              @default(0) @map("display_order")
  
  // Relationships
  ingredients          Ingredient[]
  
  // Tracking
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  
  @@unique([name, categoryId])
  @@index([categoryId])
}

model IngredientAllergen {
  id                   Int              @id @default(autoincrement()) @map("allergen_id")
  ingredientId         Int              @map("ingredient_id")
  ingredient           Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  allergenName         String           @map("allergen_name")

  @@unique([ingredientId, allergenName])
}

model IngredientDietaryFlag {
  id                   Int              @id @default(autoincrement()) @map("dietary_flag_id")
  ingredientId         Int              @map("ingredient_id")
  ingredient           Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  flag                 String           // e.g., "Vegan", "Gluten-Free"

  @@unique([ingredientId, flag])
}

model IngredientSubstitute {
  id                   Int              @id @default(autoincrement()) @map("substitute_id")
  ingredientId         Int              @map("ingredient_id")
  ingredient           Ingredient       @relation("OriginalIngredient", fields: [ingredientId], references: [id])
  substituteIngredientId Int            @map("substitute_ingredient_id")
  substituteIngredient Ingredient       @relation("SubstituteIngredient", fields: [substituteIngredientId], references: [id])
  conversionRatio      Float            @default(1) @map("conversion_ratio")
  notes                String?

  @@unique([ingredientId, substituteIngredientId])
}

// UNIT MEASUREMENT SYSTEM
model UnitOfMeasure {
  id                   Int              @id @default(autoincrement()) @map("uom_id")
  name                 String           @unique @map("uom_name")
  abbreviation         String           @unique @map("uom_abbreviation")
  system               MeasurementSystem @map("uom_system")
  type                 UnitType         @map("uom_type")
  
  // Base unit conversion (for same unit type)
  baseUnitId           Int?             @map("uom_base_unit_id")
  baseUnit             UnitOfMeasure?   @relation("UnitConversion", fields: [baseUnitId], references: [id])
  derivedUnits         UnitOfMeasure[]  @relation("UnitConversion")
  conversionFactor     Float            @default(1) @map("uom_conversion_factor")
  
  // Cross-system counterpart (e.g., cups â†’ milliliters)
  equivalentUnitId     Int?             @map("uom_equivalent_id")
  equivalentUnit       UnitOfMeasure?   @relation("SystemEquivalent", fields: [equivalentUnitId], references: [id])
  reverseEquivalents   UnitOfMeasure[]  @relation("SystemEquivalent")
  equivalentFactor     Float?           @map("uom_equivalent_factor")
  
  // Relationships
  defaultFor           Ingredient[]     @relation("DefaultUnit")
  packageFor           Ingredient[]     @relation("PackageUnit")
  
  // Volume-weight conversions
  volumeDensities      IngredientDensity[] @relation("VolumeUnit")
  weightDensities      IngredientDensity[] @relation("WeightUnit")
  
  // Tracking
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  
  @@index([system])
  @@index([type])
}

model IngredientDensity {
  id                   Int              @id @default(autoincrement()) @map("density_id")
  ingredientId         Int              @map("ingredient_id")
  ingredient           Ingredient       @relation(fields: [ingredientId], references: [id])
  volumeUnitId         Int              @map("volume_unit_id")
  volumeUnit           UnitOfMeasure    @relation("VolumeUnit", fields: [volumeUnitId], references: [id])
  weightUnitId         Int              @map("weight_unit_id")
  weightUnit           UnitOfMeasure    @relation("WeightUnit", fields: [weightUnitId], references: [id])
  conversionFactor     Float            @map("conversion_factor") // e.g., 1 cup of flour = 120 grams
  notes                String?

  @@unique([ingredientId, volumeUnitId, weightUnitId])
}